// HLSL
Texture2D g_txDiffuse : register(t0);
Texture2D g_txNormalMap : register(t1);
SamplerState g_Sample;// : register(s0);
cbuffer myDataCB
{
	float4x4  g_matWorld: packoffset(c0);
	float4x4  g_matView: packoffset(c4);
	float4x4  g_matProj: packoffset(c8);
	float4 vColor : packoffset(c12);
	float  fTime  : packoffset(c13.x);
	float  fGameTime  : packoffset(c13.y);
};

struct VS_OUTPUT
{
	float4 p : SV_POSITION;
	float3 n : NORMAL;
	float4 c : COLOR0;
	float2 t : TEXCOORD0;
	float3 light : TEXCOORD1;
};
struct PS_OUTPUT
{
	float4 c : SV_TARGET;
};
PS_OUTPUT PS( VS_OUTPUT vIn)
{
	PS_OUTPUT vOut;
	float4 vTexture = g_txDiffuse.Sample( g_Sample, vIn.t);
	float4 vFinalColor;
	vFinalColor = vTexture * vIn.c;

	float4 normal =	g_txNormalMap.Sample( g_Sample, vIn.t * 10);
		   normal =	normalize( (normal - 0.5f) * 2.0f );			

	float  fDot	= saturate( dot( normal.xyz, -vIn.light ));

	//float3 Light = normalize(vColor.xyz);
	//float c = dot(-Light,vIn.n);
	//float4 vLightColor = float4(c,c,c,1);
	//float4 vAmbientLight = float4(0.3f, 0.3f, 0.3f,1.0f);
	//vTexture.a = 1.0f;
	vOut.c = vTexture * fDot; // vFinalColor * (vAmbientLight + vLightColor);
	//vOut.c = float4(1.0f,1.0f,1.0f,1.0f);
	return vOut;
}
PS_OUTPUT PSLine( VS_OUTPUT vIn)
{
	PS_OUTPUT vOut;
	vOut.c = vIn.c;
	return vOut;
}