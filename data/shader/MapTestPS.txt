// HLSL
Texture2D g_txDiffuse : register(t0);
Texture2D g_txNormal : register(t1);
Texture2D g_txSplat[4] : register(t2);
Texture2D g_txShadowMap : register(t3);
SamplerState g_Sample : register(s0);
SamplerState g_SamplerClamp : register(s1);

cbuffer myDataCB
{
	float4x4  g_matWorld: packoffset(c0);
	float4x4  g_matView: packoffset(c4);
	float4x4  g_matProj: packoffset(c8);
	float4 vColor : packoffset(c12.x);
	float  fTime  : packoffset(c13.x);
	float  fGameTime  : packoffset(c13.y);
};
struct VS_OUTPUT
{
	float4 p : SV_POSITION;
	float3 n : NORMAL;
	float4 c : COLOR0;
	float2 t : TEXCOORD0;
	float2 nt : TEXCOORD1;
	float4 s : TEXCOORD2;
};
struct PS_OUTPUT
{
	float4 c : SV_TARGET;
};

PS_OUTPUT PS( VS_OUTPUT vIn)
{
	PS_OUTPUT vOut;

	float3 Light = float3(-1.0f,-1.0f,-1.0f);
	Light = normalize(Light);
	float ratio = saturate(dot(-Light,vIn.n));

	float3 vShadowProj;
	vShadowProj.xy = vIn.s.xy / vIn.s.w;
	float shadow = g_txShadowMap.Sample(g_SamplerClamp, vShadowProj.xy);
	float4 color = g_txDiffuse.Sample(g_Sample, vIn.t);
	float depth = vIn.s.z * 1.0f / (500.0f - 1.0f) - 1.0f / (500.0f - 1.0f);
	if( shadow + 0.01f <= depth )
	{
		color = color * float4(0.5f,0.5f,0.5f,1);
	}
	vOut.c = color * ratio;
	return vOut;
}

PS_OUTPUT PSLine( VS_OUTPUT vIn)
{
	PS_OUTPUT vOut;
	vOut.c = vIn.c;
	return vOut;
}

PS_OUTPUT PSShadow(VS_OUTPUT vIn)
{
	PS_OUTPUT vOut;
	vOut.c = vIn.c;
	return vOut;
}