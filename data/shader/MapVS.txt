// HLSL
cbuffer myDataCB : register(b0)
{
	float4x4  g_matWorld: packoffset(c0);
	float4x4  g_matView: packoffset(c4);
	float4x4  g_matProj: packoffset(c8);
	float4 vColor : packoffset(c12);
	float  fTime  : packoffset(c13.x);
	float  fGameTime  : packoffset(c13.y);
};

//cbuffer myMatTex : register(b1)
//{
//	float4x4  g_matTexCoord;
//}

cbuffer myMapCB : register(b1)
{
	float g_iNumTile : packoffset(c0.x);
	float g_iNumCell : packoffset(c0.y);
	float g_iCellSize : packoffset(c0.z);
	float g_iSpaceDivision : packoffset(c0.w);
}

struct VS_INPUT
{
	float3 p : POSITION;
	float3 n : NORMAL;
	float4 c : COLOR;
	float2 t : TEXTURE;
};
struct VS_OUTPUT
{
	float4 p : SV_POSITION;
	float3 n : NORMAL;
	float4 c : COLOR0;
	float2 t : TEXCOORD0;
	float2 nt : TEXCORRD1;
};
VS_OUTPUT VS( VS_INPUT vIn)
{
	VS_OUTPUT vOut;
	float4 p = float4(vIn.p,1.0f);
	p = mul(p, g_matWorld);
	vOut.nt = vIn.t;
	vOut.t.x = ((p.x / g_iCellSize) + (g_iNumTile * g_iNumCell) / 2.0f) / g_iNumCell;
	vOut.t.y = 1.0f - ((p.z / g_iCellSize) + (g_iNumTile * g_iNumCell) / 2.0f) / g_iNumCell;

	p = mul(p, g_matView);
	vOut.p = mul(p, g_matProj);
	// dot
	vOut.n = vIn.n;
	vOut.c = vIn.c;
	//vOut.t = vIn.t;	
	return vOut;
}
