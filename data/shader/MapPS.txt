// HLSL
Texture2D g_txDiffuse : register(t0);
Texture2D g_txNormal : register(t1);
Texture2D g_txSplat[4] : register(t2);
SamplerState g_Sample;// : register(s0);
SamplerState g_SamplerClamp : register(s1);

cbuffer myDataCB
{
	float4x4  g_matWorld: packoffset(c0);
	float4x4  g_matView: packoffset(c4);
	float4x4  g_matProj: packoffset(c8);
	float4 vColor : packoffset(c12.x);
	float  fTime  : packoffset(c13.x);
	float  fGameTime  : packoffset(c13.y);
};
struct VS_OUTPUT
{
	float4 p : SV_POSITION;
	float3 n : NORMAL;
	float4 c : COLOR0;
	float2 t : TEXCOORD0;
	float2 nt : TEXCOORD1;
	float4 s : TEXCOORD2;
};
struct PS_OUTPUT
{
	float4 c : SV_TARGET;
};

PS_OUTPUT PS( VS_OUTPUT vIn)
{
	PS_OUTPUT vOut;
	float4 vTexture = g_txDiffuse.Sample( g_Sample, vIn.t);
	float4 vNormalTex = g_txNormal.Sample(g_Sample, vIn.nt);

	float4 vTex[4];
	vTex[0] = g_txSplat[0].Sample(g_Sample, vIn.t);
	vTex[1] = g_txSplat[1].Sample(g_Sample, vIn.t);
	vTex[2] = g_txSplat[2].Sample(g_Sample, vIn.t);
	vTex[3] = g_txSplat[3].Sample(g_Sample, vIn.t);
	
	float3 vColor = vTexture.xyz * (1.0f - vNormalTex.r) + vTex[0].xyz * vNormalTex.r;
	vColor = vColor * (1.0f - vNormalTex.g) + vTex[1].xyz * vNormalTex.g;
	vColor = vColor * (1.0f - vNormalTex.b) + vTex[2].xyz * vNormalTex.b;
	vColor = vColor * (1.0f - vNormalTex.a) + vTex[3].xyz * vNormalTex.a;




	float3 Light = float3(-1.0f,-1.0f,-1.0f);
	Light = normalize(Light);
	float ratio = saturate(dot(-Light,vIn.n));


	vOut.c = float4(vColor,1.0f) * ratio;
	return vOut;
}

PS_OUTPUT PSLine( VS_OUTPUT vIn)
{
	PS_OUTPUT vOut;
	vOut.c = vIn.c;
	return vOut;
}

PS_OUTPUT PSShadow(VS_OUTPUT vIn)
{
	PS_OUTPUT vOut;
	vOut.c = vIn.c;
	return vOut;
}